---
name: Build and Push Docker Images

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.changes.outputs.images }}
      repository-version: ${{ steps.semver.outputs.version_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate repository version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          branch: main
          tag_prefix: "v"
          version_format: "${major}.${minor}.${patch}"
          major_pattern: "/^(feat|fix|refactor)!:/"
          minor_pattern: "/^feat:/"
          bump_each_commit: true
          search_commit_body: true

      - name: Detect changed images
        id: changes
        run: |
          # Get list of all images
          all_images='["kicaddev", "platformio", "wordpress-smtp", "heishamon-dev", "arduino-cli", "latex"]'

          if [[ "${{ github.event_name }}" == "push" ]] && \
             [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # For pushes to main, check what changed in the last commit
            changed_files=$(git diff --name-only HEAD~1 HEAD)
            changed_images=()

            for image in kicaddev platformio wordpress-smtp \
                        heishamon-dev arduino-cli latex; do
              if echo "$changed_files" | grep -q "^images/$image/"; then
                changed_images+=("\"$image\"")
              fi
            done

            if [ ${#changed_images[@]} -eq 0 ]; then
              echo "No image changes detected"
              echo "images=[]" >> $GITHUB_OUTPUT
            else
              images_json="[$(IFS=,; echo "${changed_images[*]}")]"
              echo "Changed images: $images_json"
              echo "images=$images_json" >> $GITHUB_OUTPUT
            fi
          else
            # For PRs and manual triggers, build all images
            echo "Building all images (PR or manual trigger)"
            echo "images=$all_images" >> $GITHUB_OUTPUT
          fi

  validate-versions:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: >-
      needs.detect-changes.outputs.images != '[]' &&
      needs.detect-changes.outputs.images != ''
    strategy:
      matrix:
        image: ${{ fromJSON(needs.detect-changes.outputs.images) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version needs update
        run: |
          image="${{ matrix.image }}"
          echo "Checking version for image: $image"

          # Check if image directory has changes
          if git diff --name-only HEAD~1 HEAD | \
             grep -q "^images/$image/"; then
            echo "Image $image has changes, checking version..."

            # Get current version from VERSION file
            current_version=$(cat "images/$image/VERSION")
            echo "Current version: $current_version"

            # Check if VERSION file was also changed
            if git diff --name-only HEAD~1 HEAD | \
               grep -q "^images/$image/VERSION$"; then
              echo "‚úÖ VERSION file was updated along with image changes"
            else
              echo "‚ùå Image content changed but VERSION file was not updated!"
              echo "Please update images/$image/VERSION file when making changes to the image."
              exit 1
            fi
          else
            echo "‚úÖ No changes detected for image $image"
          fi

  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [detect-changes, validate-versions]
    if: >-
      needs.detect-changes.outputs.images != '[]' &&
      needs.detect-changes.outputs.images != ''
    strategy:
      matrix:
        include:
          - image: kicaddev
            dockerfile: Dockerfile
            context: images/kicaddev
          - image: platformio
            dockerfile: Dockerfile
            context: images/platformio
          - image: wordpress-smtp
            dockerfile: Dockerfile
            context: images/wordpress-smtp
          - image: heishamon-dev
            dockerfile: Dockerfile
            context: images/heishamon-dev
          - image: heishamon-dev-pio
            dockerfile: Dockerfile.pio
            context: images/heishamon-dev
            source_image: heishamon-dev
          - image: arduino-cli
            dockerfile: Dockerfile
            context: images/arduino-cli
          - image: latex
            dockerfile: Dockerfile
            context: images/latex
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if image should be built
        id: should_build
        run: |
          image="${{ matrix.image }}"
          source_image="${{ matrix.source_image || matrix.image }}"

          # Check if this image (or its source) should be built
          changed_images='${{ needs.detect-changes.outputs.images }}'
          echo "Changed images: $changed_images"
          echo "Checking for: $source_image"

          if echo "$changed_images" | grep -q "\"$source_image\""; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Building $image (source: $source_image)"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping $image (no changes in $source_image)"
          fi

      - name: Set up Docker Buildx
        if: steps.should_build.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.should_build.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug authentication
        if: steps.should_build.outputs.should_build == 'true'
        run: |
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"

      - name: Extract metadata
        if: steps.should_build.outputs.should_build == 'true'
        id: meta
        run: |
          image="${{ matrix.image }}"
          source_image="${{ matrix.source_image || matrix.image }}"

          # Get image version from VERSION file
          version=$(cat "images/$source_image/VERSION")
          repo_version="${{ needs.detect-changes.outputs.repository-version }}"

          echo "image_name=$image" >> $GITHUB_OUTPUT
          echo "image_version=$version" >> $GITHUB_OUTPUT
          echo "repo_version=$repo_version" >> $GITHUB_OUTPUT

          # Generate tags
          tags="ghcr.io/${{ github.repository_owner }}/$image:latest"
          tags="$tags,ghcr.io/${{ github.repository_owner }}/$image:$version"
          if [[ "${{ github.event_name }}" == "push" ]] && \
             [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            tags="$tags,ghcr.io/${{ github.repository_owner }}/$image:$repo_version"
          fi

          echo "Generated tags: $tags"
          echo "tags=$tags" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: steps.should_build.outputs.should_build == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          push: >-
            ${{ github.event_name == 'push' &&
            github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ steps.meta.outputs.image_name }}
            org.opencontainers.image.description=Docker image for ${{ steps.meta.outputs.image_name }}
            org.opencontainers.image.version=${{ steps.meta.outputs.image_version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    permissions:
      contents: read
      packages: write
    if: >-
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      needs.detect-changes.outputs.images != '[]' &&
      needs.detect-changes.outputs.images != ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.detect-changes.outputs.repository-version }}
          name: Release ${{ needs.detect-changes.outputs.repository-version }}
          body: |
            üê≥ **Docker Images Release ${{ needs.detect-changes.outputs.repository-version }}**

            This release includes updates to the following Docker images:

            ${{ join(fromJSON(needs.detect-changes.outputs.images), ', ') }}

            ## üì¶ Available Images

            All images are available at `ghcr.io/${{ github.repository_owner }}/<image-name>:latest`

            | Image | Purpose | Tags |
            |-------|---------|------|
            | `kicaddev` | KiCad CLI tools and production extensions | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `platformio` | PlatformIO development environment | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `wordpress-smtp` | WordPress with SMTP support | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `heishamon-dev` | HeishaMon development (Arduino CLI) | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `heishamon-dev-pio` | HeishaMon development (PlatformIO) | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `arduino-cli` | Arduino CLI development environment | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `latex` | LaTeX/TeXLive environment | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |

            ## üöÄ Usage

            ```bash
            # Pull any image
            docker pull ghcr.io/${{ github.repository_owner }}/<image-name>:latest

            # Example: KiCad development
            docker run --rm -v $(pwd):/workspace ghcr.io/${{ github.repository_owner }}/kicaddev:latest kicad_export project.kicad_pro
            ```

            ## üîÑ Matrix Build Strategy

            This release was built using a matrix strategy that:
            - ‚úÖ Detects changes to individual images
            - ‚úÖ Validates that VERSION files are updated when image content changes
            - ‚úÖ Builds only changed images to optimize CI/CD performance
            - ‚úÖ Maintains independent versioning for images vs repository releases

            ---

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.detect-changes.outputs.repository-version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
