---
name: Build and Push Docker Images

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write
  actions: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.changes.outputs.images }}
      repository-version: ${{ steps.semver.outputs.version_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate repository version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          branch: main
          tag_prefix: "v"
          version_format: "${major}.${minor}.${patch}"
          major_pattern: "/^(feat|fix|refactor)!:/"
          minor_pattern: "/^feat:/"
          bump_each_commit: true
          search_commit_body: true

      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Detect changed images and check package existence
        id: changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get list of all images
          all_images_array=(kicaddev platformio wordpress-smtp heishamon-dev arduino-cli latex zephyr zephyr-sdk)
          all_images='["kicaddev", "platformio", "wordpress-smtp", "heishamon-dev", "arduino-cli", "latex", "zephyr", "zephyr-sdk"]'

          # Function to check if package version exists in GHCR
          check_package_exists() {
            local image=$1
            local version=$2
            local owner="${{ github.repository_owner }}"

            echo "Checking if package $owner/$image:$version exists in GHCR..."

            # Query GitHub Container Registry API for package versions
            response=$(curl -s -w "%{http_code}" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/user/packages/container/$image/versions" 2>/dev/null)

            # Extract HTTP status code (last 3 characters)
            http_code="${response: -3}"
            # Extract response body (everything except last 3 characters)
            response_body="${response%???}"

            case "$http_code" in
              200)
                echo "  üì¶ Package found, checking versions..."
                # Check if our version exists in the response
                if echo "$response_body" | jq -r '.[].metadata.container.tags[]?' 2>/dev/null | grep -q "^$version$"; then
                  echo "  ‚úÖ Version $version exists for $image"
                  return 0
                else
                  echo "  ‚ùå Version $version NOT found for $image"
                  return 1
                fi
                ;;
              404)
                echo "  ‚ùå Package $image not found (HTTP 404)"
                return 1
                ;;
              403)
                echo "  ‚ö†Ô∏è  Access denied to package $image (HTTP 403) - assuming missing"
                return 1
                ;;
              *)
                echo "  ‚ö†Ô∏è  API error (HTTP $http_code) - assuming package missing"
                return 1
                ;;
            esac
          }

          # Collect images that need building
          images_to_build=()

          if [[ "${{ github.event_name }}" == "push" ]] && \
             [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # For pushes to main, check what changed in the last commit
            changed_files=$(git diff --name-only HEAD~1 HEAD)
            echo "=== Checking for changed images ==="

            for image in "${all_images_array[@]}"; do
              should_build=false
              reason=""

              # Check if image files changed
              if echo "$changed_files" | grep -q "^images/$image/"; then
                should_build=true
                reason="files changed"
                echo "üìù $image: Files changed"
              fi

              # Check if package version exists (only if we have a GITHUB_TOKEN)
              if [[ -n "$GITHUB_TOKEN" ]]; then
                version=$(cat "images/$image/VERSION")
                if ! check_package_exists "$image" "$version"; then
                  should_build=true
                  if [[ -n "$reason" ]]; then
                    reason="$reason + missing package"
                  else
                    reason="missing package version $version"
                  fi
                  echo "üì¶ $image: Package version $version missing from registry"
                fi
              else
                echo "‚ö†Ô∏è  No GITHUB_TOKEN available, skipping package existence check"
              fi

              if [[ "$should_build" == "true" ]]; then
                images_to_build+=("\"$image\"")
                echo "‚úÖ $image will be built ($reason)"
              else
                echo "‚è≠Ô∏è  $image will be skipped (no changes, package exists)"
              fi
            done

            if [ ${#images_to_build[@]} -eq 0 ]; then
              echo "=== No images need building ==="
              echo "images=[]" >> $GITHUB_OUTPUT
            else
              images_json="[$(IFS=,; echo "${images_to_build[*]}")]"
              echo "=== Images to build: $images_json ==="
              echo "images=$images_json" >> $GITHUB_OUTPUT
            fi
          else
            # For PRs and manual triggers, build all images
            echo "Building all images (PR or manual trigger)"
            echo "images=$all_images" >> $GITHUB_OUTPUT
          fi

  validate-versions:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: >-
      needs.detect-changes.outputs.images != '[]' &&
      needs.detect-changes.outputs.images != ''
    strategy:
      matrix:
        image: ${{ fromJSON(needs.detect-changes.outputs.images) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version needs update
        run: |
          image="${{ matrix.image }}"
          echo "Checking version for image: $image"

          # Check if image directory has changes
          if git diff --name-only HEAD~1 HEAD | \
             grep -q "^images/$image/"; then
            echo "Image $image has changes, checking version..."

            # Get current version from VERSION file
            current_version=$(cat "images/$image/VERSION")
            echo "Current version: $current_version"

            # Check if VERSION file was also changed
            if git diff --name-only HEAD~1 HEAD | \
               grep -q "^images/$image/VERSION$"; then
              echo "‚úÖ VERSION file was updated along with image changes"
            else
              echo "‚ùå Image content changed but VERSION file was not updated!"
              echo "Please update images/$image/VERSION file when making changes to the image."
              exit 1
            fi
          else
            echo "‚úÖ No changes detected for image $image"
          fi

  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      actions: read
    needs: [detect-changes, validate-versions]
    if: >-
      needs.detect-changes.outputs.images != '[]' &&
      needs.detect-changes.outputs.images != ''
    strategy:
      fail-fast: true
      matrix:
        include:
          - image: kicaddev
            dockerfile: Dockerfile
            context: images/kicaddev
            dependencies: []
          - image: platformio
            dockerfile: Dockerfile
            context: images/platformio
            dependencies: []
          - image: wordpress-smtp
            dockerfile: Dockerfile
            context: images/wordpress-smtp
            dependencies: []
          - image: heishamon-dev
            dockerfile: Dockerfile
            context: images/heishamon-dev
            dependencies: []
          - image: heishamon-dev-pio
            dockerfile: Dockerfile.pio
            context: images/heishamon-dev
            source_image: heishamon-dev
            dependencies: []
          - image: arduino-cli
            dockerfile: Dockerfile
            context: images/arduino-cli
            dependencies: []
          - image: latex
            dockerfile: Dockerfile
            context: images/latex
            dependencies: []
          - image: zephyr
            dockerfile: Dockerfile
            context: images/zephyr
            dependencies: []
          - image: zephyr-sdk
            dockerfile: Dockerfile
            context: images/zephyr-sdk
            dependencies: ["zephyr"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if image should be built
        id: should_build
        run: |
          image="${{ matrix.image }}"
          source_image="${{ matrix.source_image || matrix.image }}"

          # Check if this image (or its source) should be built
          changed_images='${{ needs.detect-changes.outputs.images }}'
          echo "Changed images: $changed_images"
          echo "Checking for: $source_image"

          if echo "$changed_images" | grep -q "\"$source_image\""; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Building $image (source: $source_image)"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping $image (no changes in $source_image)"
          fi

      - name: Wait for dependencies
        if: steps.should_build.outputs.should_build == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dependencies='${{ toJSON(matrix.dependencies) }}'
          
          if [ "$dependencies" = "[]" ] || [ "$dependencies" = "null" ]; then
            echo "‚ÑπÔ∏è  No dependencies for ${{ matrix.image }}"
            exit 0
          fi
          
          echo "üîÑ Checking dependencies for ${{ matrix.image }}: $dependencies"
          
          # Parse dependencies array
          deps=$(echo "$dependencies" | jq -r '.[]')
          
          for dep in $deps; do
            echo "‚è≥ Waiting for dependency: $dep"
            
            # Get required version for dependency
            if [ -f "images/$dep/VERSION" ]; then
              required_version=$(cat "images/$dep/VERSION")
              echo "   Required version: $required_version"
            else
              echo "‚ùå VERSION file not found for dependency $dep"
              exit 1
            fi
            
            # First check if dependency is being built in current workflow
            changed_images='${{ needs.detect-changes.outputs.images }}'
            if echo "$changed_images" | grep -q "\"$dep\""; then
              echo "   üîÑ Dependency $dep is being built in current workflow"
              
              # Wait for dependency job to complete by checking GitHub API
              max_wait=1800  # 30 minutes
              wait_interval=30
              elapsed=0
              
              while [ $elapsed -lt $max_wait ]; do
                echo "   üîç Checking workflow jobs status... (${elapsed}s elapsed)"
                
                # Get current workflow run jobs
                jobs_response=$(curl -s \
                  -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")
                
                # Debug: Show all job names
                if [ $elapsed -eq 0 ]; then
                  echo "   üîç Available jobs in this workflow:"
                  echo "$jobs_response" | jq -r '.jobs[].name' | sed 's/^/     - /'
                fi
                
                # Check if dependency build job completed successfully
                dep_job_status=$(echo "$jobs_response" | jq -r --arg dep "$dep" '
                  .jobs[] | 
                  select(.name | test("build-and-push \\(.+ / " + $dep + "\\)")) | 
                  .status + ":" + (.conclusion // "null")')
                
                if [ -z "$dep_job_status" ]; then
                  # Alternative: try simpler job name matching
                  dep_job_status=$(echo "$jobs_response" | jq -r --arg dep "$dep" '
                    .jobs[] | 
                    select(.name | contains($dep)) | 
                    select(.name | contains("build-and-push")) |
                    .status + ":" + (.conclusion // "null")' | head -1)
                fi
                
                echo "   üìä Job status for $dep: $dep_job_status"
                
                case "$dep_job_status" in
                  "completed:success")
                    echo "   ‚úÖ Dependency $dep build completed successfully!"
                    break
                    ;;
                  "completed:failure"|"completed:cancelled"|"completed:skipped")
                    echo "‚ùå Dependency $dep build failed: $dep_job_status"
                    exit 1
                    ;;
                  "in_progress:null"|"queued:null")
                    echo "   ‚è≥ Dependency $dep build still in progress..."
                    ;;
                  "")
                    echo "   ‚è≥ Dependency $dep build job not found yet..."
                    ;;
                  *)
                    echo "   ‚ùì Unknown status for $dep: $dep_job_status"
                    ;;
                esac
                
                sleep $wait_interval
                elapsed=$((elapsed + wait_interval))
              done
              
              # Check if we timed out
              if [ $elapsed -ge $max_wait ]; then
                echo "‚ùå Timeout waiting for dependency $dep build to complete"
                exit 1
              fi
              
            else
              echo "   üì¶ Dependency $dep not being built in current workflow, checking registry..."
              
              # Check if dependency image exists in GHCR
              response=$(curl -s -w "%{http_code}" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/user/packages/container/$dep/versions" 2>/dev/null)
              
              http_code="${response: -3}"
              response_body="${response%???}"
              
              case "$http_code" in
                200)
                  if echo "$response_body" | jq -r '.[].metadata.container.tags[]?' 2>/dev/null | grep -q "^$required_version$"; then
                    echo "   ‚úÖ Dependency $dep:$required_version is available in registry!"
                  else
                    echo "‚ùå Required version $required_version not found in registry for $dep"
                    exit 1
                  fi
                  ;;
                404)
                  echo "‚ùå Package $dep not found in registry (HTTP 404)"
                  exit 1
                  ;;
                *)
                  echo "‚ùå API error (HTTP $http_code) checking registry for $dep"
                  exit 1
                  ;;
              esac
            fi
          done
          
          echo "‚úÖ All dependencies satisfied for ${{ matrix.image }}"

      - name: Set up Docker Buildx
        if: steps.should_build.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.should_build.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug authentication
        if: steps.should_build.outputs.should_build == 'true'
        run: |
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"

      - name: Extract metadata
        if: steps.should_build.outputs.should_build == 'true'
        id: meta
        run: |
          image="${{ matrix.image }}"
          source_image="${{ matrix.source_image || matrix.image }}"

          # Get image version from VERSION file
          version=$(cat "images/$source_image/VERSION")
          repo_version="${{ needs.detect-changes.outputs.repository-version }}"

          echo "image_name=$image" >> $GITHUB_OUTPUT
          echo "image_version=$version" >> $GITHUB_OUTPUT
          echo "repo_version=$repo_version" >> $GITHUB_OUTPUT

          # Generate tags
          tags="ghcr.io/${{ github.repository_owner }}/$image:latest"
          tags="$tags,ghcr.io/${{ github.repository_owner }}/$image:$version"
          # Note: Repository version tag removed to avoid confusion
          # Each image uses only its own VERSION file for tagging

          echo "Generated tags: $tags"
          echo "tags=$tags" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: steps.should_build.outputs.should_build == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          push: >-
            ${{ github.event_name == 'push' &&
            github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ steps.meta.outputs.image_name }}
            org.opencontainers.image.description=Docker image for ${{ steps.meta.outputs.image_name }}
            org.opencontainers.image.version=${{ steps.meta.outputs.image_version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: false

  create-release:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    permissions:
      contents: write
      packages: write
    if: >-
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      needs.detect-changes.outputs.images != '[]' &&
      needs.detect-changes.outputs.images != ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.detect-changes.outputs.repository-version }}
          name: Release ${{ needs.detect-changes.outputs.repository-version }}
          body: |
            üê≥ **Docker Images Release ${{ needs.detect-changes.outputs.repository-version }}**

            This release includes updates to the following Docker images:

            ${{ join(fromJSON(needs.detect-changes.outputs.images), ', ') }}

            ## üì¶ Available Images

            All images are available at `ghcr.io/${{ github.repository_owner }}/<image-name>:latest`

            | Image | Purpose | Tags |
            |-------|---------|------|
            | `kicaddev` | KiCad CLI tools and production extensions | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `platformio` | PlatformIO development environment | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `wordpress-smtp` | WordPress with SMTP support | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `heishamon-dev` | HeishaMon development (Arduino CLI) | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `heishamon-dev-pio` | HeishaMon development (PlatformIO) | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `arduino-cli` | Arduino CLI development environment | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `latex` | LaTeX/TeXLive environment | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `zephyr` | Zephyr RTOS development base environment | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |
            | `zephyr-sdk` | Zephyr RTOS with pre-installed SDK and sources | `latest`, `${{ needs.detect-changes.outputs.repository-version }}` |

            ## üöÄ Usage

            ```bash
            # Pull any image
            docker pull ghcr.io/${{ github.repository_owner }}/<image-name>:latest

            # Example: KiCad development
            docker run --rm -v $(pwd):/workspace ghcr.io/${{ github.repository_owner }}/kicaddev:latest kicad_export project.kicad_pro
            ```

            ## üîÑ Matrix Build Strategy

            This release was built using a matrix strategy that:
            - ‚úÖ Detects changes to individual images
            - ‚úÖ Validates that VERSION files are updated when image content changes
            - ‚úÖ Builds only changed images to optimize CI/CD performance
            - ‚úÖ Maintains independent versioning for images vs repository releases

            ---

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.detect-changes.outputs.repository-version }}...main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
